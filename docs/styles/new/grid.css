// Adapted (with some renaming experiments) from:
/*!
 * Milligram v1.1.0
 * http://milligram.github.io
 *
 * Copyright (c) 2016 CJ Patoilo
 * Licensed under the MIT license
*/

// Grid
// ––––––––––––––––––––––––––––––––––––––––––––––––––

// .Container is main centered wrapper with a max width of 112.0rem (1120px)
&B{Container} {
  margin: 0 auto;
  max-width: 112.0rem;
  padding: 0 2.0rem;
  position: relative;
  width: 100%;
}

// Using flexbox for the grid, inspired by Philip Walton:
// http://philipwalton.github.io/solved-by-flexbox/demos/grids/
// By default each .Column within a .Row will evenly take up
// available width, and the height of each .Column with take
// up the height of the tallest .Column in the same .Row
&B{Row} {
  display: flex;
  flex-direction: column;
  padding: 0;
  width: 100%;
}

&BM{Row}{noPadding} {
  padding: 0;
}

&BM{Row}{noPadding} > &B{Column} {
  padding: 0;
}

&BM{Row}{wrap} {
  flex-wrap: wrap;
}

// Vertically Align Columns
// .Row-valign-* vertically aligns every .Column in the .Row
&BM{Row}{valign-top} {
  -ms-grid-row-align: flex-start;
         align-items: flex-start;
}

&BM{Row}{valign-bottom} {
  -ms-grid-row-align: flex-end;
         align-items: flex-end;
}

&BM{Row}{valign-center} {
  -ms-grid-row-align: center;
         align-items: center;
}

&BM{Row}{valign-stretch} {
  -ms-grid-row-align: stretch;
      align-items: stretch;
}

&BM{Row}{valign-baseline} {
  -ms-grid-row-align: baseline;
      align-items: baseline;
}

// JJOR: original = .Row .Col..., removed .Row
&B{Column} {
  display: block;
  flex: 1;
  margin-left: 0;
  max-width: 100%;
  width: 100%;
}

// Column Offsets
&define{_col_offset}{
// JJOR: original = .Row .Col..., removed .Row
  &BM{Column}{offset-&1} {
    margin-left: &2;
  }
}

&_col_offset{10}{10%}
&_col_offset{20}{20%}
&_col_offset{25}{25%}
&_col_offset{33}{33.3333%}
&_col_offset{34}{33.3333%}
&_col_offset{50}{50%}
&_col_offset{66}{66.6666%}
&_col_offset{67}{66.6666%}
&_col_offset{75}{75%}
&_col_offset{80}{80%}
&_col_offset{90}{90%}

// Explicit Column Percent Sizes
// By default each grid column will evenly distribute
// across the grid. However, you can specify individual
// columns to take up a certain size of the available area
&define{_col_size}{
// JJOR: original = .Row .Col..., removed .Row
  &BM{Column}{size-&1} {
    flex: 0 0 &2;
    max-width: &2;
  }
}

&_col_size{10}{10%}
&_col_size{20}{20%}
&_col_size{25}{25%}
&_col_size{33}{33.3333%}
&_col_size{34}{33.3333%}
&_col_size{50}{50%}
&_col_size{66}{66.6666%}
&_col_size{67}{66.6666%}
&_col_size{75}{75%}
&_col_size{80}{80%}
&_col_size{90}{90%}

// .Column-valign-* vertically aligns an individual .Column
// JJOR: original = .C .C-m (bug?), changed to .C.C-m
// JJOR: original = .Row .Col..., removed .Row
&BM{Column}{valign-top} {
  align-self: flex-start;
}

&BM{Column}{valign-bottom} {
  align-self: flex-end;
}

&BM{Column}{valign-center} {
  align-self: center;
}

// Larger than mobile screen
@media (min-width: 40rem) { // Safari desktop has a bug using `rem`, but Safari mobile works
  &B{Row} {
    flex-direction: row;
    margin-left: -1.0rem;
    width: calc(100% + 2.0rem);
  }
  // JJOR: original = .Row .Col..., removed .Row
  &B{Column} {
    margin-bottom: inherit;
    padding: 0 1.0rem;
  }
}

// vim:ts=2:sw=2:ai:et:fileencoding=utf-8:syntax=css
