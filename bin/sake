#!/bin/bash

#
# Wraps GNU Make
#

########################################################################
# Bash options
########################################################################

set -o errexit -o noglob -o nounset -o pipefail

shopt -s expand_aliases

########################################################################
# Environment
########################################################################

# Imported from environment if defined; otherwise use default value
declare -ri NCORES=${NCORES:-2}

# Exported to use in makefiles and Sakefile
declare -xr JQTLIB='/usr/local/share/jqt'

########################################################################
# Check project on current directory
########################################################################

declare CONFIGURATION_FILE

check() {
    # Sakefile must exist
    if test ! -e Sakefile; then
        echo 1>&2 "sake: no \`Sakefile\` found."
        exit 1
    fi

    # Configuration file must exist
    if test -e config.yaml; then
        CONFIGURATION_FILE=config.yaml
    elif test -e config.json; then
        CONFIGURATION_FILE=config.json
    else
        echo 1>&2 "sake: no \`config.yaml\` or \`config.json\` file found."
        exit 1
    fi
}

########################################################################
# Commands
########################################################################

list() {
    make -f Sakefile -np 2>&1  |
        grep -v '^[SmM]akefile' |
        awk '/^[^ \t.%][-A-Za-z0-9_.]*:/ { print $1 }' |
        sort --unique  |
        sed 's/:\+$//' |
        pr --omit-pagination --width=50 --columns=4 --across
} 1>&2

help() {
    echo 'Usage: sake [command] [[options] [variable=definition] ...]'
    echo -e '\nCommands, builtin and user defined:\n'
    list
    echo -e '\nSee the manpage for full documentation.'
} 1>&2

dag() {
    make -f Sakefile -Bdn \
        | sed -n \
            -e "s/'//g" \
            -e 's/\.$//' \
            -e 's/Considering target file //p'
}

new() {
    local path=$1 template=$2

    [[ -d "$path" ]] && {
        echo 1>&2 "sake: pathname \`$path\` exists!"
        exit 1
    }
    case $template in
        basic|blog)
            ;;
        *)
            echo 1>&2 "sake: unknown skeleton \`$template\`!"
            exit 1
            ;;
    esac

    #mkdir -p "$path"
    #cd "$path"
    #cp -r $JQTLIB/template-$template/* .

    echo 1>&2 "sake: Target \`new\` not implemented."
}

########################################################################
# Run
########################################################################

# Options to gmake
declare -ra makeflags=(
    --jobs=$(( NCORES * 150 / 100  ))  # NCORES * 1.5
    --makefile=Sakefile
    --output-sync=target
)

# Exec gmake
alias _sake='exec make "${makeflags[@]}"'

# Default command: `build`
[[ $# == 0 ]] && set -- build

# Check if != new
[[ $1 == new ]] || check

# Run _sake
case $1 in
    help) help; exit 0
        ;;
    list) list; exit 0
        ;;
    dag) dag; exit 0
        ;;
    new)
        shift
        kind=site path=site template=basic
        while (( $# > 0 )); do
            case "$1" in
                kind=?*) kind=${1#kind=}; shift ;;
                path=?*) path=${1#path=}; shift ;;
                template=?*) template=${1#template=}; shift ;;
                model=?*) template=${1#model=}; shift ;;
                # site page post block theme layout...
                site=?*) kind=site path=${1#site=}; shift ;;
                page=?*) kind=page path=${1#page=}; shift ;;
                *) break 2 ;; # error?
            esac
        done
        new $path $template
        exit 0
        ;;
    touch)
        touch $CONFIGURATION_FILE
        shift; _sake build "$@"
        ;;
    clober)
        shift; _sake clobber "$@"
        ;;
    config)
        shift; _sake configure "$@"
        ;;
    *)  _sake "$@"
        ;;
esac

# vim:ai:sw=4:ts=4:et:syntax=sh
