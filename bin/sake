#!/bin/bash

#
# Wraps GNU Make
#

########################################################################
# Bash options
########################################################################

set -o errexit -o noglob -o nounset -o pipefail

shopt -s expand_aliases

########################################################################
# Environment
########################################################################

# Imported from environment if defined; otherwise use default value
declare -ri NCORES=${NCORES:-2}

# Exported to use in makefiles and Sakefile
declare -xr JQTLIB='/usr/local/share/jqt'

########################################################################
# Check project on current directory
########################################################################

# Sakefile must exist
if test ! -e Sakefile; then
    echo 1>&2 "sake: no \`Sakefile\` found."
    exit 1
fi

# Configuration file must exist
if test ! -e config.yaml && test ! -e config.json; then
    echo 1>&2 "sake: no \`config.yaml\` or \`config.json\` file found."
    exit 1
fi

########################################################################
# Run
########################################################################

# Options to gmake
declare -ra makeflags=(
    --jobs=$(( NCORES * 150 / 100  ))  # NCORES * 1.5
    --makefile=Sakefile
    --output-sync=target
)

# Exec gmake
alias _sake='exec make "${makeflags[@]}"'

# Default command: `build`
[[ $# == 0 ]] && set -- build

# Run _sake
case $1 in
    help)
        echo 'Usage: sake [command] [[options] [variable=definition] ...]'
        echo -e '\nCommands, builtin and user defined:\n'
        ;& # fall through
    list)
        make -f Sakefile -np 2>&1  |
            grep -v '^[SmM]akefile' |
            awk '/^[^ \t.%][-A-Za-z0-9_.]*:/ { print $1 }' |
            sort --unique  |
            sed 's/:\+$//' |
            pr --omit-pagination --width=50 --columns=4 --across
        [[ $1 == help ]] && {
            echo -e '\nSee the manpage for full documentation.'
        }
        ;;
    clober)
        shift
        _sake clobber "$@"
        ;;
    config)
        shift
        _sake configure "$@"
        ;;
    dag)
        make -f Sakefile -Bdn \
            | sed -n \
                -e "s/'//g" \
                -e 's/\.$//' \
                -e 's/Considering target file //p'
        ;;
    new)
        echo 1>&2 "sake: Target \`new\` not implemented."
        exit 1
        ;;
    touch)
        if test -e config.yaml; then touch config.yaml; else touch config.json; fi
        shift
        _sake build "$@"
        ;;
    *)
        _sake "$@"
        ;;
esac

# vim:ai:sw=4:ts=4:et:syntax=sh
